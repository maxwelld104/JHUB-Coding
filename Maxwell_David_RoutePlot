import turtle # For drawing, controlloing and displaying the drone flight path.

wn=turtle.Screen()
wn.bgcolor("Green")
wn.title("A drone flight path simulator")
wn.setup(650,650)

#import images
turtle.register_shape("plane_east.gif")
turtle.register_shape("plane_south.gif")
turtle.register_shape("plane_west.gif")
turtle.register_shape("plane_north.gif")

#Create Pen
class Pen(turtle.Turtle):
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("square")
        self.color("Blue")
        self.penup()
        self.speed(0)

class Player(turtle.Turtle): # Defining the turtle which will act as the drone
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("plane_east.gif")
        #self.color("Black")
        self.penup()
        self.speed(1)

    def go_up(self): #Defining a movement in the north dircetion
        #Calculate whether the drone can move to square
        move_to_x = player.xcor()
        move_to_y = player.ycor()+24
        self.shape("plane_north.gif")

        #Check if the space has a wall , if yes print error message
        if (move_to_x, move_to_y) not in walls:
            self.goto(move_to_x, move_to_y)
        else:
            print("Error: The route is outside the grid. Moving to next instruction.")
    
    def go_down(self): #Defining a movement in the north dircetion
      #Calculate whether the drone can move to square
        move_to_x = player.xcor()
        move_to_y = player.ycor()-24
        self.shape("plane_south.gif")

        #Check if the space has a wall , if yes print error message
        if (move_to_x, move_to_y) not in walls:
            self.goto(move_to_x, move_to_y)
        else:
            print("Error: The route is outside the grid. Moving to next instruction.")
        
    def go_right(self): #Defining a movement in the north dircetion
         #Calculate whether the drone can move to square
        move_to_x = player.xcor()+24
        move_to_y = player.ycor()
        self.shape("plane_east.gif")

        #Check if the space has a wall , if yes print error message
        if (move_to_x, move_to_y) not in walls:
            self.goto(move_to_x, move_to_y)
        else:
            print("Error: The route is outside the grid. Moving to next instruction.")

    def go_left(self): #Defining a movement in the north dircetion
         #Calculate whether the drone can move to square
        move_to_x = player.xcor()-24
        move_to_y = player.ycor()
        self.shape("plane_west.gif")

        #Check if the space has a wall , if yes print error message 
        if (move_to_x, move_to_y) not in walls:
            self.goto(move_to_x, move_to_y)
        else:
            print("Error: The route is outside the grid. Moving to next instruction.")
            
#create route list#
levels = [""]

#Define the bounds of the route (12x12 grid)
level_1 = [
"XXXXXXXXXXXXXX",
"X            X",
"X            X",
"X            X",
"X            X",
"X            X",
"X            X",
"X            X",
"X            X",
"X            X",
"X            X",
"X            X",
"X            X",
"XXXXXXXXXXXXXX",
]

#Add bounded route to route list
levels.append(level_1)

#Create Route Setup Function
def setup_level(level):
    for y in range(len(level)):
        for x in range(len(level[y])):
            #Get the character at each x,y coordinate
            character = level[y][x]
            #calculate screen x, y, coordinates
            screen_x=-24 +(x*24)
            screen_y=-24+(y*24)

            if character == "X": #Function will add green block to boundary of route plotter as definded in level_1
                pen.goto(screen_x, screen_y)
                pen.stamp()
                #add coordinates to wall list - This is used to determine if the drone can move into certain squares
                walls.append((screen_x, screen_y))
        


#create class instances pen-boundry drawer, player-drone
pen=Pen()
player = Player()

#create wall coordinate list
walls=[]

#set up the route
setup_level(levels[1])

#The master function that will read the txt files and determine movements of the player-drone
cont='y'
while cont=='y':
    print("Welcome to the Drone flight path simulator. Please select the route required in the form Route00X.txt: ")
    print("")
    routechooser=input() # Route txt file selector from input

    file = open(routechooser, 'r', encoding='utf-8-sig') # Allows us to take the information from txt file
    read = file.readlines() # Takes the lines fro the txt file
    modifiedroute=[]

    for line in read:
        modifiedroute.append(line.strip()) # add the lines from the txt file and add them to modifiedroute array
    Start_x = ((int(modifiedroute[0])*24)-24)# calculates starting x position (due to scale of each block being  of screen must be calculated)
    Start_y = ((int(modifiedroute[1])*24)-24) # calculates starting y position (due to scale of screen must be calculated)
    #Player start position is determined by first two elements of the string
    player.goto((Start_x), ((Start_y)))
    
    for i in range(len(modifiedroute[2:])): #This loop will read the rest of information stored from txt file and tell the drone to move corresponding to the value in txt file ie S == go.down
        if modifiedroute[2+i] == 'S':
            player.go_down()
            print("(",(int(((player.xcor())/24)+1)),",",((int((player.ycor())/24)+1)),")") # After each movement the program will read out the current coordinate.
        if modifiedroute[2+i] == 'N':
            player.go_up()
            print("(",(int(((player.xcor())/24)+1)),",",((int((player.ycor())/24)+1)),")") # After each movement the program will read out the current coordinate.
        if modifiedroute[2+i] == 'E':
            player.go_right()
            print("(",(int(((player.xcor())/24)+1)),",",((int((player.ycor())/24)+1)),")") # After each movement the program will read out the current coordinate.
        if modifiedroute[2+i] == 'W':
            player.go_left()
            print("(",(int(((player.xcor())/24)+1)),",",((int((player.ycor())/24)+1)),")") # After each movement the program will read out the current coordinate.

    
    cont=input("Do you want to start another route? (y/STOP)") # restarts the program once route is completed and asks if you would like to select new route. 
    
    


exit()

